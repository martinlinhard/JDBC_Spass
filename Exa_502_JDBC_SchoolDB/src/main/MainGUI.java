package main;

import beans.Grade;
import beans.Student;
import database.DB_StatementExecutionHandler;
import io.IOHandler;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import utils.ThreadUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author martin
 */
public class MainGUI extends javax.swing.JFrame {

    //Actual data
    private DB_StatementExecutionHandler exec;
    private Map<String, Integer> classMappings = new HashMap<>();
    private HashMap<String, List<Student>> students = new HashMap<>();

    //To display stuff
    private List<Student> currentStudents = new ArrayList<>();
    private String currentClass = "";
    private int currentIndex = 0;

    //For gui purposes
    private boolean connected = false;
    private CreateState state = CreateState.NEW;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() throws ClassNotFoundException, SQLException {
        initComponents();
        this.exec = new DB_StatementExecutionHandler();
        this.btCancel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        btConnect = new javax.swing.JButton();
        btImport = new javax.swing.JButton();
        btClose = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbGrade = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfGrade = new javax.swing.JTextField();
        tfFirstname = new javax.swing.JTextField();
        tfBirthdate = new javax.swing.JTextField();
        tfSurname = new javax.swing.JTextField();
        tfCatNR = new javax.swing.JTextField();
        btNewAdd = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        btFastBack = new javax.swing.JButton();
        btBack = new javax.swing.JButton();
        btForward = new javax.swing.JButton();
        btFastForward = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        cbGender = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Database"));
        jPanel1.setLayout(new java.awt.GridLayout(1, 3));

        btConnect.setText("Connect");
        btConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onConnect(evt);
            }
        });
        jPanel1.add(btConnect);

        btImport.setText("Import");
        btImport.setEnabled(false);
        btImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onImport(evt);
            }
        });
        jPanel1.add(btImport);

        btClose.setText("Close");
        btClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onClose(evt);
            }
        });
        jPanel1.add(btClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Grade"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Grade:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel3.add(jLabel1, gridBagConstraints);

        cbGrade.setEnabled(false);
        cbGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onClassSelect(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel3.add(cbGrade, gridBagConstraints);

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Students"));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Cat. NR");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Firstname");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Birthdate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Grade");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel5, gridBagConstraints);

        jLabel7.setText("Surname");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel7, gridBagConstraints);

        tfGrade.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(tfGrade, gridBagConstraints);

        tfFirstname.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(tfFirstname, gridBagConstraints);

        tfBirthdate.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(tfBirthdate, gridBagConstraints);

        tfSurname.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(tfSurname, gridBagConstraints);

        tfCatNR.setEnabled(false);
        tfCatNR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCatNRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(tfCatNR, gridBagConstraints);

        btNewAdd.setText("New");
        btNewAdd.setEnabled(false);
        btNewAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCreateStudent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(btNewAdd, gridBagConstraints);

        btCancel.setText("Cancel");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(btCancel, gridBagConstraints);

        btFastBack.setText("<<");
        btFastBack.setEnabled(false);
        btFastBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onFastPrevious(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        jPanel4.add(btFastBack, gridBagConstraints);

        btBack.setText("<");
        btBack.setEnabled(false);
        btBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onPrevious(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        jPanel4.add(btBack, gridBagConstraints);

        btForward.setText(">");
        btForward.setEnabled(false);
        btForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onNext(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        jPanel4.add(btForward, gridBagConstraints);

        btFastForward.setText(">>");
        btFastForward.setEnabled(false);
        btFastForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onFastForward(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        jPanel4.add(btFastForward, gridBagConstraints);

        jLabel8.setText("Gender");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel8, gridBagConstraints);

        cbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));
        cbGender.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(cbGender, gridBagConstraints);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void printStudent() {
        try {
            Student s = this.currentStudents.get(this.currentIndex);

            this.tfFirstname.setText(s.getFirstname());
            this.tfSurname.setText(s.getSurname());
            this.tfBirthdate.setText(Student.DTF.format(s.getDateOfBirth()));
            if (s.getGender().equals("m")) {
                this.cbGender.setSelectedIndex(0);
            } else {
                this.cbGender.setSelectedIndex(1);
            }
            this.tfCatNR.setText(s.getCatno() + "");
            this.tfGrade.setText(s.getClassname());
        } catch (IndexOutOfBoundsException | NullPointerException e) {
        }
    }

    private void reset() {
        this.tfFirstname.setText("");
        this.tfSurname.setText("");
        this.tfBirthdate.setText("");
        this.tfCatNR.setText("");
        this.tfGrade.setText("");
        this.cbGender.setSelectedIndex(0);

        this.toggleInput();

        this.btCancel.setVisible(true);
        this.btNewAdd.setText("Add");
    }

    private void toggleInput() {
        this.tfFirstname.setEnabled(!this.tfFirstname.isEnabled());
        this.tfSurname.setEnabled(!this.tfSurname.isEnabled());
        this.tfBirthdate.setEnabled(!this.tfBirthdate.isEnabled());
        this.tfGrade.setEnabled(!this.tfGrade.isEnabled());
        this.cbGender.setEnabled(!this.cbGender.isEnabled());
        this.cbGrade.setEnabled(!this.cbGrade.isEnabled());
        this.btForward.setEnabled(!this.btForward.isEnabled());
        this.btBack.setEnabled(!this.btBack.isEnabled());
        this.btFastBack.setEnabled(!this.btFastBack.isEnabled());
        this.btFastForward.setEnabled(!this.btFastForward.isEnabled());
        this.btImport.setEnabled(!this.btImport.isEnabled());

    }

    private void updateClass() {
        this.currentStudents = this.students.get(this.currentClass.trim());
        this.currentIndex = 0;
        this.printStudent();
    }

    private void onConnect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onConnect
        try {
            if (!this.connected) {
                //Not connected --> Connect
                this.exec.connect();
                this.btConnect.setText("Disconnect");
                this.connected = true;
            } else {
                //Already connected --> Disconnect
                this.exec.disconnect();
                this.btConnect.setText("Connect");
                this.connected = false;
            }
            this.btImport.setEnabled(this.connected);
            this.btNewAdd.setEnabled(connected);
            this.btForward.setEnabled(connected);
            this.btBack.setEnabled(connected);
            this.btFastBack.setEnabled(connected);
            this.btFastForward.setEnabled(connected);
            this.cbGrade.setEnabled(connected);
        } catch (SQLException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_onConnect

    private void onCreateStudent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCreateStudent
        if (this.state == CreateState.NEW) {
            this.reset();
            this.state = CreateState.ADD;
        } else {
            ThreadUtils.executeAsync(() -> {
                try {
                    //add student
                    String firstname = this.tfFirstname.getText();
                    String surname = this.tfSurname.getText();
                    LocalDate birthdate = LocalDate.parse(this.tfBirthdate.getText(), Student.DTF);
                    String grade = this.tfGrade.getText();
                    String gender = ((String) this.cbGender.getSelectedItem()).equals("Male") ? "m" : "w";

                    Student s = new Student(0, grade, 0, firstname, surname, gender, birthdate);
                    this.exec.insertStudent(s, classMappings);
                    this.currentStudents = this.students.get(this.currentClass);

                    if (this.students.containsKey(grade)) {
                        List<Student> prev = this.students.get(grade);
                        prev.add(s);
                        this.exec.updateStudents(this.students.get(grade));
                        this.currentClass = grade;
                        this.cbGrade.setSelectedItem(grade);
                    } else {
                        this.students.put(grade, new ArrayList<Student>() {
                            {
                                add(s);
                            }
                        });
                        this.exec.updateStudents(this.students.get(grade));
                        this.currentClass = grade;
                        this.cbGrade.addItem(grade);
                        this.cbGrade.setSelectedItem(grade);
                    }

                    this.reset();
                    this.state = CreateState.NEW;
                    this.btNewAdd.setText("New");
                    this.btCancel.setVisible(false);
                    this.updateClass();
                } catch (SQLException ex) {
                    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            });

        }
    }//GEN-LAST:event_onCreateStudent

    private void onFastPrevious(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onFastPrevious
        this.currentIndex = 0;
        this.printStudent();
    }//GEN-LAST:event_onFastPrevious

    private void tfCatNRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCatNRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCatNRActionPerformed

    private void onImport(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onImport
        // To avoid blocking the gui
        ThreadUtils.executeAsync(() -> {
            try {
                this.exec.clearTables();
                //load students
                List<Student> localStudents = IOHandler.load();

                //parse grades
                Set<Grade> grades = Student.getGradesForStudents(localStudents);

                // ... and insert them into the db
                for (Grade g : grades) {
                    exec.insertGrade(g);
                }

                //Generate mappings
                this.classMappings = Grade.toClassMappings(grades);

                //insert students
                for (Student s : localStudents) {
                    exec.insertStudent(s, this.classMappings);
                }

                //split the students into classes
                this.students = Student.splitIntoClasses(localStudents);

                //It's important to add them after the students are present,
                // since adding them throws a ActionEvent on the ComboBox
                for (List<Student> curr : this.students.values()) {
                    // and update their catnos
                    exec.updateStudents(curr);
                }

                grades.forEach((g) -> {
                    this.cbGrade.addItem(g.getClassName());
                });

                this.currentClass = this.cbGrade.getItemAt(0);
                this.updateClass();
            } catch (FileNotFoundException | SQLException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }//GEN-LAST:event_onImport

    private void onClose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onClose
        try {
            this.exec.disconnect();
            ThreadUtils.close();
            System.exit(0);
        } catch (SQLException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_onClose

    private void onNext(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onNext
        this.currentIndex++;
        this.currentIndex %= this.currentStudents.size();
        this.printStudent();
    }//GEN-LAST:event_onNext

    private void onPrevious(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onPrevious
        if (this.currentIndex == 0) {
            this.currentIndex = this.currentStudents.size() - 1;
        } else {
            this.currentIndex--;
        }
        this.printStudent();
    }//GEN-LAST:event_onPrevious

    private void onFastForward(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onFastForward
        this.currentIndex = this.currentStudents.size() - 1;
        this.printStudent();
    }//GEN-LAST:event_onFastForward

    private void onClassSelect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onClassSelect
        String s = (String) this.cbGrade.getSelectedItem();
        this.currentClass = s;
        this.updateClass();
    }//GEN-LAST:event_onClassSelect

    private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
        this.toggleInput();
        this.printStudent();
        this.btCancel.setVisible(false);
        this.btNewAdd.setText("New");
        this.state = state.NEW;
    }//GEN-LAST:event_onCancel

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new MainGUI().setVisible(true);
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBack;
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btClose;
    private javax.swing.JButton btConnect;
    private javax.swing.JButton btFastBack;
    private javax.swing.JButton btFastForward;
    private javax.swing.JButton btForward;
    private javax.swing.JButton btImport;
    private javax.swing.JButton btNewAdd;
    private javax.swing.JComboBox<String> cbGender;
    private javax.swing.JComboBox<String> cbGrade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField tfBirthdate;
    private javax.swing.JTextField tfCatNR;
    private javax.swing.JTextField tfFirstname;
    private javax.swing.JTextField tfGrade;
    private javax.swing.JTextField tfSurname;
    // End of variables declaration//GEN-END:variables
}

enum CreateState {
    NEW,
    ADD,
}
